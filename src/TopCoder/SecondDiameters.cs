using System;
using System.Collections.Generic;
using System.Linq;

namespace CSharpProblemSolving.TopCoder
{
	public class SecondDiameters
	{
		public long getSecondDiameters(int[] X, int[] Y)
		{
			HashSet<long> sum = new HashSet<long>();
			for (var idx = 0; idx < X.Length; idx++)
			{
				List<long> vals = new List<long>();
				var x1 = X[idx];
				var y1 = Y[idx];
				for (var i = 0; i < X.Length; i++)
				{
					if (idx == i)
					{
						continue;
					}
					var x2 = X[i];
					var y2 = Y[i];
					long sum1 = (long) (((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)));
					vals.Add(sum1);
				}

				var test = vals.OrderByDescending(s => s).ToList();
				if (test.Count > 1)
				{
					sum.Add(test[1]);
				}
			}

			return sum.Sum();
		}

		// BEGIN KAWIGIEDIT TESTING
		// Generated by KawigiEdit-pf 2.3.0
		#region Testing code generated by KawigiEdit
		[STAThread]
		private static Boolean KawigiEdit_RunTest(int testNum, int[] p0, int[] p1, Boolean hasAnswer, long p2) {
			Console.Write("Test " + testNum + ": [" + "{");
			for (int i = 0; p0.Length > i; ++i) {
				if (i > 0) {
					Console.Write(",");
				}
				Console.Write(p0[i]);
			}
			Console.Write("}" + "," + "{");
			for (int i = 0; p1.Length > i; ++i) {
				if (i > 0) {
					Console.Write(",");
				}
				Console.Write(p1[i]);
			}
			Console.Write("}");
			Console.WriteLine("]");
			SecondDiameters obj;
			long answer;
			obj = new SecondDiameters();
			DateTime startTime = DateTime.Now;
			answer = obj.getSecondDiameters(p0, p1);
			DateTime endTime = DateTime.Now;
			Boolean res;
			res = true;
			Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
			if (hasAnswer) {
				Console.WriteLine("Desired answer:");
				Console.WriteLine("\t" + p2);
			}
			Console.WriteLine("Your answer:");
			Console.WriteLine("\t" + answer);
			if (hasAnswer) {
				res = answer == p2;
			}
			if (!res) {
				Console.WriteLine("DOESN'T MATCH!!!!");
			} else if ((endTime - startTime).TotalSeconds >= 2) {
				Console.WriteLine("FAIL the timeout");
				res = false;
			} else if (hasAnswer) {
				Console.WriteLine("Match :-)");
			} else {
				Console.WriteLine("OK, but is it right?");
			}
			Console.WriteLine("");
			return res;
		}
		public static void Main___(string[] args) {
			Boolean all_right;
			Boolean disabled;
			Boolean tests_disabled;
			all_right = true;
			tests_disabled = false;
		
			int[] p0;
			int[] p1;
			long p2;
		
			// ----- test 0 -----
			disabled = false;
			p0 = new int[]{0,1,1};
			p1 = new int[]{0,0,1};
			p2 = 0L;
			all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			// ----- test 1 -----
			disabled = false;
			p0 = new int[]{0,0,1,1};
			p1 = new int[]{0,1,0,1};
			p2 = 4L;
			all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			// ----- test 2 -----
			disabled = false;
			p0 = new int[]{0,0,1,2,2};
			p1 = new int[]{0,10,5,0,10};
			p2 = 500L;
			all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			// ----- test 3 -----
			disabled = false;
			p0 = new int[]{1,2,3,4,5};
			p1 = new int[]{1,3,6,10,15};
			p2 = 534L;
			all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			if (all_right) {
				if (tests_disabled) {
					Console.WriteLine("You're a stud (but some test cases were disabled)!");
				} else {
					Console.WriteLine("You're a stud (at least on given cases)!");
				}
			} else {
				Console.WriteLine("Some of the test cases had errors.");
			}
		}
		#endregion
		// END KAWIGIEDIT TESTING
	}
}

//Powered by KawigiEdit-pf 2.3.0!
