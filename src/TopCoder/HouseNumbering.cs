using System;
using System.Collections.Generic;

namespace CSharpProblemSolving.TopCoder
{
	public class HouseNumbering
	{
		public int[] prepareDigits(int firstHouse, int numberOfHouses)
		{
			var list = new List<int>();
			int[] ret = new int [10];
			int i = firstHouse;
			while (true)
			{
				list.Add(i);
				i += 2;
				if (list.Count == numberOfHouses)
				{
					break;
				}
			}
			foreach (var item in list)
			{
				var str = item.ToString();
				// for (int j = 0; j < 10; j++)
				{
					int n = item;
					while (n > 0)
					{
						ret[n % 10]++;
						n /= 10;
					}
					// var count = str.Count(s => s.ToString() == j.ToString());
					// if (count != 0)
					// {
					// 	ret[j] += count;
					// }
				}
			}

			return ret;
		}

		// BEGIN KAWIGIEDIT TESTING
		// Generated by KawigiEdit-pf 2.3.0
		#region Testing code generated by KawigiEdit
		[STAThread]
		private static Boolean KawigiEdit_RunTest(int testNum, int p0, int p1, Boolean hasAnswer, int[] p2) {
			Console.Write("Test " + testNum + ": [" + p0 + "," + p1);
			Console.WriteLine("]");
			HouseNumbering obj;
			int[] answer;
			obj = new HouseNumbering();
			DateTime startTime = DateTime.Now;
			answer = obj.prepareDigits(p0, p1);
			DateTime endTime = DateTime.Now;
			Boolean res;
			res = true;
			Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
			if (hasAnswer) {
				Console.WriteLine("Desired answer:");
				Console.Write("\t" + "{");
				for (int i = 0; p2.Length > i; ++i) {
					if (i > 0) {
						Console.Write(",");
					}
					Console.Write(p2[i]);
				}
				Console.WriteLine("}");
			}
			Console.WriteLine("Your answer:");
			Console.Write("\t" + "{");
			for (int i = 0; answer.Length > i; ++i) {
				if (i > 0) {
					Console.Write(",");
				}
				Console.Write(answer[i]);
			}
			Console.WriteLine("}");
			if (hasAnswer) {
				if (answer.Length != p2.Length) {
					res = false;
				} else {
					for (int i = 0; answer.Length > i; ++i) {
						if (answer[i] != p2[i]) {
							res = false;
						}
					}
				}
			}
			if (!res) {
				Console.WriteLine("DOESN'T MATCH!!!!");
			} else if ((endTime - startTime).TotalSeconds >= 2) {
				Console.WriteLine("FAIL the timeout");
				res = false;
			} else if (hasAnswer) {
				Console.WriteLine("Match :-)");
			} else {
				Console.WriteLine("OK, but is it right?");
			}
			Console.WriteLine("");
			return res;
		}
		public static void ___Main(string[] args) {
			Boolean all_right;
			Boolean disabled;
			Boolean tests_disabled;
			all_right = true;
			tests_disabled = false;
		
			int p0;
			int p1;
			int[] p2;
		
			// ----- test 0 -----
			disabled = false;
			p0 = 7;
			p1 = 4;
			p2 = new int[]{0,3,0,1,0,0,0,1,0,1};
			all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			// ----- test 1 -----
			disabled = false;
			p0 = 2;
			p1 = 6;
			p2 = new int[]{1,2,2,0,1,0,1,0,1,0};
			all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			// ----- test 2 -----
			disabled = false;
			p0 = 997;
			p1 = 1;
			p2 = new int[]{0,0,0,0,0,0,0,1,0,2};
			all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			// ----- test 3 -----
			disabled = false;
			p0 = 160;
			p1 = 47;
			p2 = new int[]{15,25,42,5,14,2,14,5,14,5};
			all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, true, p2) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			if (all_right) {
				if (tests_disabled) {
					Console.WriteLine("You're a stud (but some test cases were disabled)!");
				} else {
					Console.WriteLine("You're a stud (at least on given cases)!");
				}
			} else {
				Console.WriteLine("Some of the test cases had errors.");
			}
		}
		#endregion
		// END KAWIGIEDIT TESTING
	}
}

//Powered by KawigiEdit-pf 2.3.0!
