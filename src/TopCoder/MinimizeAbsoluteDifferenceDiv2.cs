using System;
using System.Collections.Generic;
using System.Linq;
using MadHelper = CSharpProblemSolving.Mad.MadHelper;


namespace CSharpProblemSolving
{
	public class MinimizeAbsoluteDifferenceDiv2
	{
		public int[] findTriple(int x0, int x1, int x2)
		{
			List<int> nums = new List<int>() {x0, x1, x2};
			var comb = MadHelper.GetPermutations(new List<int>() {0, 1, 2}, 3).ToList();
			//List<List<int>> comb = new List<List<int>>();
			//comb.Add(new List<int>() { 0, 1, 2 });
			//comb.Add(new List<int>() { 0, 2, 1 });
			//comb.Add(new List<int>() { 1, 0, 2 });
			//comb.Add(new List<int>() { 1, 2, 0 });
			//comb.Add(new List<int>() { 2, 0, 1 });
			//comb.Add(new List<int>() { 2, 1, 0 });
			List<double> mins = new List<double>();
			foreach (var intss in comb)
			{
				var ints = intss.ToList();
				int x = nums[ints[0]];
				int y = nums[ints[1]];
				int z = nums[ints[2]];
				if (y == 0)
				{
					mins.Add(double.MaxValue);
					continue;

				}

				double dou = Math.Abs(((double) ((double)x / y)) - z);
				mins.Add(dou);
			}

			var min = mins.Min();
			int idx = mins.IndexOf(min);
			return comb[idx].ToArray();

		}
		static void GetCombination(List<int> list)
		{
			double count = Math.Pow(2, list.Count);
			for (int i = 1; i <= count - 1; i++)
			{
				string str = Convert.ToString(i, 2).PadLeft(list.Count, '0');
				for (int j = 0; j < str.Length; j++)
				{
					if (str[j] == '1')
					{
						Console.Write(list[j]);
					}
				}
				Console.WriteLine();
			}
		}
		public static List<List<T>> GetAllCombos<T>(List<T> list)
		{
			List<List<T>> result = new List<List<T>>();
			// head
			result.Add(new List<T>());
			result.Last().Add(list[0]);
			if (list.Count == 1)
				return result;
			// tail
			List<List<T>> tailCombos = GetAllCombos(list.Skip(1).ToList());
			tailCombos.ForEach(combo =>
			{
				result.Add(new List<T>(combo));
				combo.Add(list[0]);
				result.Add(new List<T>(combo));
			});
			return result;
		}

		// BEGIN KAWIGIEDIT TESTING
		// Generated by KawigiEdit-pf 2.3.0
		#region Testing code generated by KawigiEdit
		[STAThread]
		private static Boolean KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, Boolean hasAnswer, int[] p3) {
			Console.Write("Test " + testNum + ": [" + p0 + "," + p1 + "," + p2);
			Console.WriteLine("]");
			MinimizeAbsoluteDifferenceDiv2 obj;
			int[] answer;
			obj = new MinimizeAbsoluteDifferenceDiv2();
			DateTime startTime = DateTime.Now;
			answer = obj.findTriple(p0, p1, p2);
			DateTime endTime = DateTime.Now;
			Boolean res;
			res = true;
			Console.WriteLine("Time: " + (endTime - startTime).TotalSeconds + " seconds");
			if (hasAnswer) {
				Console.WriteLine("Desired answer:");
				Console.Write("\t" + "{");
				for (int i = 0; p3.Length > i; ++i) {
					if (i > 0) {
						Console.Write(",");
					}
					Console.Write(p3[i]);
				}
				Console.WriteLine("}");
			}
			Console.WriteLine("Your answer:");
			Console.Write("\t" + "{");
			for (int i = 0; answer.Length > i; ++i) {
				if (i > 0) {
					Console.Write(",");
				}
				Console.Write(answer[i]);
			}
			Console.WriteLine("}");
			if (hasAnswer) {
				if (answer.Length != p3.Length) {
					res = false;
				} else {
					for (int i = 0; answer.Length > i; ++i) {
						if (answer[i] != p3[i]) {
							res = false;
						}
					}
				}
			}
			if (!res) {
				Console.WriteLine("DOESN'T MATCH!!!!");
			} else if ((endTime - startTime).TotalSeconds >= 2) {
				Console.WriteLine("FAIL the timeout");
				res = false;
			} else if (hasAnswer) {
				Console.WriteLine("Match :-)");
			} else {
				Console.WriteLine("OK, but is it right?");
			}
			Console.WriteLine("");
			return res;
		}
		public static void __Main(string[] args) {
			Boolean all_right;
			Boolean disabled;
			Boolean tests_disabled;
			all_right = true;
			tests_disabled = false;
		
			int p0;
			int p1;
			int p2;
			int[] p3;
		
			// ----- test 0 -----
			disabled = false;
			p0 = 1;
			p1 = 1;
			p2 = 1;
			p3 = new int[]{0,1,2};
			all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			// ----- test 1 -----
			disabled = false;
			p0 = 1;
			p1 = 2;
			p2 = 3;
			p3 = new int[]{1,2,0};
			all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			// ----- test 2 -----
			disabled = false;
			p0 = 7;
			p1 = 20;
			p2 = 5;
			p3 = new int[]{1,0,2};
			all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			// ----- test 3 -----
			disabled = false;
			p0 = 6;
			p1 = 2;
			p2 = 3;
			p3 = new int[]{0,1,2};
			all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			// ----- test 4 -----
			disabled = false;
			p0 = 10;
			p1 = 11;
			p2 = 111;
			p3 = new int[]{2,1,0};
			all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
			tests_disabled = tests_disabled || disabled;
			// ------------------
		
			if (all_right) {
				if (tests_disabled) {
					Console.WriteLine("You're a stud (but some test cases were disabled)!");
				} else {
					Console.WriteLine("You're a stud (at least on given cases)!");
				}
			} else {
				Console.WriteLine("Some of the test cases had errors.");
			}
		}
		#endregion
		// END KAWIGIEDIT TESTING
	}
}

//Powered by KawigiEdit-pf 2.3.0!
